#version 450

layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform UBO 
{
    vec4 camera_position;
    vec4 camera_direction;
	float aspect_ratio;
} ubo;

struct sphere
{
    vec3 center;
    float radius;
    uint material_type;
    uint material_idx;
    uint _dummy1;
    uint _dummy2;
};

layout(std140, binding = 2) readonly buffer spheresIn 
{
   sphere spheres[];
};

struct lambertianMaterial
{
    vec3 albedo;
    float dummy;
};

layout(std140, binding = 3) readonly buffer lambertianMaterialsIn 
{
   lambertianMaterial lambertianMaterials[];
};

float pi = 3.1415926535897932384626433832795;
float half_pi = pi / 2.0;

float infinity = 1.0 / 0.0;

const uint lambert_material_type = 0x00000000u;
const uint metal_material_type = 0x00000001u;

bool is_nearly_zero(vec3 v)
{
    const float s = 1e-8;
    return (abs(v[0]) < s) && (abs(v[1]) < s) && (abs(v[2]) < s);
}

float random(inout vec2 state)
{
    float v = fract(sin(dot(state.xy, vec2(12.9898, 78.233))) * 43758.5453123);
    state = vec2(state.y + v * 7.1243, state.x + v * 13.63456);
    return v;
}

vec3 random_in_unit_sphere(inout vec2 state)
{
    return vec3(random(state) * 2.0 - 1.0, random(state) * 2.0 - 1.0, random(state) * 2.0 - 1.0);
}

vec3 random_unit_vector(inout vec2 state) 
{
    return normalize(random_in_unit_sphere(state));
}

vec3 random_on_hemisphere(vec3 normal, inout vec2 state)
{
    vec3 on_unit_sphere = random_unit_vector(state);
    if (dot(on_unit_sphere, normal) > 0.0) // In the same hemisphere as the normal
        return on_unit_sphere;
    else
        return -on_unit_sphere;
}

struct interval
{
    float min;
    float max;
};

interval make_empty_interval()
{
    interval i;
    i.min = infinity;
    i.max = -infinity;
    return i;
}

interval make_universe_interval()
{
    interval i;
    i.min = -infinity;
    i.max = infinity;
    return i;
}

bool interval_contains(interval i, float v)
{
    return i.min <= v && v <= i.max;
}

bool interval_surrounds(interval i, float v)
{
    return i.min < v && v < i.max;
}

struct ray
{
    vec3 origin;
    vec3 direction;
};

vec3 ray_at(ray r, float t)
{
    return r.origin + r.direction * t;
}

struct raycast_result
{
    vec3 point;
    vec3 normal;
    float t;
    bool front_face;
    uint material_type;
    uint material_idx;
};

raycast_result raycast_sphere(ray r, interval i, sphere s)
{
    raycast_result result;
    vec3 oc = r.origin - s.center;
    float a = dot(r.direction, r.direction);
    float half_b = dot(oc, r.direction);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = half_b * half_b - a * c;

    if (discriminant < 0.0)
    {
        result.t = i.max;
        return result;
    }
    else
    {
        float sqrtd = sqrt(discriminant);

        // Find the nearest root that lies in the acceptable range.
        float root = (-half_b - sqrtd) / a;
        if (!interval_surrounds(i, root)) 
        {
            root = (-half_b + sqrtd) / a;
            if (!interval_surrounds(i, root))
            {
                result.t = i.max;
                return result;
            }
        }

        result.t = root;
        result.point = ray_at(r, root);

        vec3 outward_normal = (result.point - s.center) / s.radius;

        result.front_face = dot(r.direction, outward_normal) < 0;
        result.normal = result.front_face ? outward_normal : -outward_normal;
        result.material_type = s.material_type;
        result.material_idx = s.material_idx;
        return result;
    }
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    ivec2 dim = imageSize(resultImage);

    // Camera
    vec3 cam_pos = ubo.camera_position.xyz;
    vec3 cam_dir = ubo.camera_direction.xyz;
    vec3 vup = vec3(0,1,0);     // Camera-relative "up" direction

    float focal_length = 1.0;
    float vfov = half_pi;
    float h = tan(vfov / 2.0);

    float viewport_height = 2.0 * h * focal_length;
    float viewport_width = viewport_height * ubo.aspect_ratio;
    
    vec3 w = -cam_dir;
    vec3 u = cross(vup, w);
    vec3 v = cross(w, u);

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 viewport_u = viewport_width * u;
    vec3 viewport_v = viewport_height * -v;

    // Calculate the horizontal and vertical delta vectors from pixel to pixel.
    vec3 pixel_delta_u = viewport_u / dim.x;
    vec3 pixel_delta_v = viewport_v / dim.y;

    // Calculate the location of the upper left pixel.
    vec3 viewport_upper_left = cam_pos
                             - focal_length * w - viewport_u / 2.0f - viewport_v / 2.0;
    vec3 pixel00_loc = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);

    // add time?
    vec2 state = gl_GlobalInvocationID.xy;
    
    // multisampling
    uint samples_count = 10;
    float sample_weight = 1.0f / (samples_count * 1.0f);

    vec4 final_color = vec4(0.0f, 0.0f, 0.0f, 0.0f);

    for (int i = 0; i < samples_count; ++i)
    {
        // generate random offset in [-0.5f, 0.5f] range
        float xoffset = random(state) - 0.5f;
        float yoffset = random(state) - 0.5f;
        
        vec3 pixel_center = pixel00_loc + 
            ((gl_GlobalInvocationID.x + xoffset) * pixel_delta_u) +
            ((gl_GlobalInvocationID.y + yoffset) * pixel_delta_v);
        vec3 ray_direction = pixel_center - cam_pos;

        ray r = ray(cam_pos, normalize(ray_direction));

        vec3 color = vec3(1.0f, 1.0f, 1.0f);
        const uint max_depth = 10;

        int d = 0;
        for (; d < max_depth; ++d)
        {
            raycast_result result;
            float ray_tmax = infinity;
            for (int s = 0; s < spheres.length(); ++s)
            {
                result = raycast_sphere(r, interval(0, ray_tmax), spheres[s]);
                if (result.t < ray_tmax)
                {
                    ray_tmax = result.t;
                }
            }

            if (ray_tmax != infinity)
            {
                if (result.material_type == lambert_material_type)
                {
                    vec3 random_vec = random_on_hemisphere(result.normal, state);
                    if (dot(result.normal, random_vec) < 0.0f)
                    {
                        random_vec = -random_vec;
                    }

                    random_vec += result.normal;

                    if (is_nearly_zero(random_vec))
                    {
                        random_vec = result.normal;
                    }
                    else
                    {
                        random_vec = normalize(random_vec);
                    }

                    r = ray(result.point + random_vec * 0.0001f, random_vec);
                    color *= lambertianMaterials[result.material_idx].albedo;
                }
                else if (result.material_type == metal_material_type)
                {
                    vec3 reflected = reflect(r.direction, result.normal);
                    float fuzz = 0.1;
                    reflected += (fuzz * random_unit_vector(state));

                    color *= vec3(0.6, 0.6, 0.6);

                    if (dot(reflected, result.normal) > 0.0)
                    {
                        r = ray(result.point + reflected * 0.0001f, reflected);
                    }
                    else
                    {
                        break;
                    }
                }
            }
            else
            {
                vec3 unit_direction = normalize(r.direction);

                float a = 0.5 * (unit_direction.y + 1.0);
                color *= (1.0 - a) * vec3(1.0, 1.0, 1.0) + a * vec3(0.5, 0.7, 1.0);
                break;
            }
        }

        if (d == max_depth)
        {
            final_color = vec4(0.0, 0.0, 0.0, 0.0);
        }
        else
        {
            final_color += vec4(color, 0) * sample_weight;
        }
    } 

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), final_color);
}