#version 450

layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform UBO 
{
	float aspectRatio;
} ubo;

struct sphere
{
    vec3 center;
    float radius;
};

layout(std140, binding = 2) readonly buffer spheresIn 
{
   sphere spheres[];
};

float infinity = 1.0 / 0.0;

struct interval
{
    float min;
    float max;
};

interval make_empty_interval()
{
    interval i;
    i.min = infinity;
    i.max = -infinity;
    return i;
}

interval make_universe_interval()
{
    interval i;
    i.min = -infinity;
    i.max = infinity;
    return i;
}

bool interval_contains(interval i, float v)
{
    return i.min <= v && v <= i.max;
}

bool interval_surrounds(interval i, float v)
{
    return i.min < v && v < i.max;
}

struct ray
{
    vec3 origin;
    vec3 direction;
};

vec3 ray_at(ray r, float t)
{
    return r.origin + r.direction * t;
}

struct raycast_result
{
    vec3 point;
    vec3 normal;
    float t;
    bool front_face;
};

raycast_result raycast_sphere(ray r, interval i, sphere s)
{
    raycast_result result;
    vec3 oc = r.origin - s.center;
    float a = dot(r.direction, r.direction);
    float half_b = dot(oc, r.direction);
    float c = dot(oc, oc) - s.radius * s.radius;
    float discriminant = half_b * half_b - a * c;

    if (discriminant < 0.0)
    {
        result.t = i.max;
        return result;
    }
    else
    {
        float sqrtd = sqrt(discriminant);

        // Find the nearest root that lies in the acceptable range.
        float root = (-half_b - sqrtd) / a;
        if (!interval_surrounds(i, root)) 
        {
            root = (-half_b + sqrtd) / a;
            if (!interval_surrounds(i, root))
            {
                result.t = i.max;
                return result;
            }
        }

        result.t = root;
        result.point = ray_at(r, root);

        vec3 outward_normal = (result.point - s.center) / s.radius;

        result.front_face = dot(r.direction, outward_normal) < 0;
        result.normal = result.front_face ? outward_normal : -outward_normal;

        return result;
    }
}

vec3 ray_color(ray r)
{
    raycast_result result;
    float ray_tmax = infinity;
    for (int i = 0; i < spheres.length(); ++i)
    {
        result = raycast_sphere(r, interval(0, ray_tmax), spheres[i]);
        if (result.t < ray_tmax)
        {
            ray_tmax = result.t;
        }
    }

    if (ray_tmax != infinity)
    {
        return 0.5 * (result.normal + vec3(1.0, 1.0, 1.0));
    }

    vec3 unit_direction = normalize(r.direction);

    float a = 0.5*(unit_direction.y + 1.0);
    return (1.0-a)*vec3(1.0, 1.0, 1.0) + a*vec3(0.5, 0.7, 1.0);
} 

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    ivec2 dim = imageSize(resultImage);

    // Camera

    float focal_length = 1.0;
    float viewport_height = 2.0;
    float viewport_width = viewport_height * ubo.aspectRatio;
    vec3 camera_center = vec3(0.0, 0.0, 0.0);

    // Calculate the vectors across the horizontal and down the vertical viewport edges.
    vec3 viewport_u = vec3(viewport_width, 0, 0);
    vec3 viewport_v = vec3(0, -viewport_height, 0);

    // Calculate the horizontal and vertical delta vectors from pixel to pixel.
    vec3 pixel_delta_u = viewport_u / dim.x;
    vec3 pixel_delta_v = viewport_v / dim.y;

    // Calculate the location of the upper left pixel.
    vec3 viewport_upper_left = camera_center
                             - vec3(0, 0, focal_length) - viewport_u/2 - viewport_v/2;
    vec3 pixel00_loc = viewport_upper_left + 0.5 * (pixel_delta_u + pixel_delta_v);

    vec3 pixel_center = pixel00_loc + (gl_GlobalInvocationID.x * pixel_delta_u) + (gl_GlobalInvocationID.y * pixel_delta_v);
    vec3 ray_direction = pixel_center - camera_center;

    vec4 finalColor = vec4(ray_color(ray(camera_center, ray_direction)), 0);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
}