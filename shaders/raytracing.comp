#version 450

layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform UBO 
{
	float aspectRatio;
} ubo;

vec3 ray_color(vec3 origin, vec3 direction)
{
    float a = 0.5*(direction.y + 1.0);
    return (1.0-a)*vec3(1.0, 1.0, 1.0) + a*vec3(0.5, 0.7, 1.0);
} 

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
    ivec2 dim = imageSize(resultImage);
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

    vec3 rayO = vec3(0.0, 0.0, 0.0);
	vec3 rayD = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ubo.aspectRatio, -1.0), -1.0));

    vec4 finalColor = vec4(ray_color(rayO, rayD), 0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), finalColor);
}